The Nautilus Application Development team is planning to deploy one of the php-based applications on Kubernetes cluster. As per the recent discussion with DevOps team, they have decided to use nginx and phpfpm. Additionally, they also shared some custom configuration requirements. Below you can find more details. Please complete this task as per requirements mentioned below:



1) Create a service to expose this app, the service type must be NodePort, nodePort should be 30012.


2.) Create a config map named nginx-config for nginx.conf as we want to add some custom settings in nginx.conf.


a) Change the default port 80 to 8095 in nginx.conf.


b) Change the default document root /usr/share/nginx to /var/www/html in nginx.conf.


c) Update the directory index to index  index.html index.htm index.php in nginx.conf.


3.) Create a pod named nginx-phpfpm .


b) Create a shared volume named shared-files that will be used by both containers (nginx and phpfpm) also it should be a emptyDir volume.


c) Map the ConfigMap we declared above as a volume for nginx container. Name the volume as nginx-config-volume, mount path should be /etc/nginx/nginx.conf and subPath should be nginx.conf


d) Nginx container should be named as nginx-container and it should use nginx:latest image. PhpFPM container should be named as php-fpm-container and it should use php:7.4-fpm-alpine image.


e) The shared volume shared-files should be mounted at /var/www/html location in both containers. Copy /opt/index.php from jump host to the nginx document root inside the nginx container, once done you can access the app using App button on the top bar.


Before clicking on finish button always make sure to check if all pods are in running state.


You can use any labels as per your choice.


Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Check the number of nodes running
    1. thor@jump_host ~$ kubectl get nodes
       NAME                      STATUS   ROLES           AGE    VERSION
       kodekloud-control-plane   Ready    control-plane   106m   v1.27.3-44+b5c876a05b7bbd

    ## Write the nginx-config.yaml file to create nginx-config ConfigMap
    2. thor@jump_host ~$ vi nginx-config.yaml

       apiVersion: v1
       kind: ConfigMap
       metadata:
         name: nginx-config
       data:
         nginx.conf: |
           events {
       
           }
       
           http {
             server {
               listen 8095 default_server;
               listen [::]:8095 default_server;
       
               # Set nginx to serve files from the shared volume!
               root /var/www/html;
               index index.html index.htm index.php
               server_name _;
               location / {
                 try_files $uri $uri/ =404;
               }
               location ~ \.php$ {
                 include fastcgi_params;
                 fastcgi_param REQUEST_METHOD $request_method;
                 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                 fastcgi_pass 127.0.0.1:9000;
               }
             }
           }

    ## Apply the nginx-config.yaml file to create nginx-config ConfigMap
    3. thor@jump_host ~$ kubectl apply -f nginx-config.yaml
       configmap/nginx-config created

    ## check the ConfigMap
    4. thor@jump_host ~$ kubectl get cm
       NAME               DATA   AGE
       kube-root-ca.crt   1      111m
       nginx-config       1      6s

    ## Write the nginx-phpfpm-pod.yaml file to create nginx-phpfpm-pod pod
    5. thor@jump_host ~$ vi nginx-phpfpm-pod.yaml

       apiVersion: v1
       kind: Pod
       metadata:
         name: nginx-phpfpm
         labels:
           app: nginx-phpfpm
       spec:
         volumes:
         - name: shared-files
           emptyDir: {}
         - name: nginx-config-volume
           configMap:
             name: nginx-config
         containers:
         - name: nginx-container
           image: nginx:latest
           volumeMounts:
           - name: shared-files
             mountPath: /var/www/html
           - name: nginx-config-volume
             mountPath: /etc/nginx/nginx.conf
             subPath: nginx.conf
         - name: php-fpm-container
           image: php:7.4-fpm-alpine
           volumeMounts:
           - name: shared-files
             mountPath: /var/www/html

    ## Apply the nginx-phpfpm-pod.yaml file to create nginx-phpfpm-pod pod
    6. thor@jump_host ~$ kubectl apply -f nginx-phpfpm-pod.yaml
       pod/nginx-phpfpm created

    ## Check the Pod Status
    7. thor@jump_host ~$ kubectl get pods
       NAME           READY   STATUS    RESTARTS   AGE
       nginx-phpfpm   2/2     Running   0          14s

    ## Check the index.php from /opt directory in jump_host server
    8. thor@jump_host ~$ cd /opt/
       thor@jump_host /opt$ ls -larth
       total 12K
       -rw-r--r-- 1 root root    9 Feb 11 01:10 index.php
       drwxr-xr-x 1 root root 4.0K Feb 11 01:11 ..
       drwxr-xr-x 1 root root 4.0K Feb 11 01:11 .
       thor@jump_host /opt$ cat index.php 
       It works!

    ## Copy the /opt/index.php from JUMP Host to nginx-phpfpm pod inside nginx-container root directory
    9. thor@jump_host ~$ kubectl cp /opt/index.php nginx-phpfpm:/var/www/html/ -c nginx-container

    ## Verify index.php is copied to nginx-phpfpm pod inside nginx-container root directory or not
    10. thor@jump_host ~$ kubectl exec -it nginx-phpfpm -c nginx-container -- bash
        root@nginx-phpfpm:/# cd /var/www/html/
        root@nginx-phpfpm:/var/www/html# ls -larth
        total 12K
        drwxr-xr-x 3 root root 4.0K Feb 11 01:22 ..
        -rw-r--r-- 1 root root    9 Feb 11 01:24 index.php
        drwxrwxrwx 2 root root 4.0K Feb 11 01:24 .
        
        root@nginx-phpfpm:/var/www/html# cat index.php 
        It works!

    ## Write a nginx-phpfpm-svc.yaml file to create a nginx-phpfpm-svc nodePort service
    11. thor@jump_host ~$ vi nginx-phpfpm-svc.yaml

        apiVersion: v1
        kind: Service
        metadata:
          name: nginx-phpfpm-svc
        spec:
          type: NodePort
          selector:
            app: nginx-phpfpm
          ports:
            - port: 8095
              targetPort: 8095
              nodePort: 30012

    ## Apply the nginx-phpfpm-svc.yaml file to create a nginx-phpfpm-svc nodePort service
    12. thor@jump_host ~$ kubectl apply -f nginx-phpfpm-svc.yaml
        service/nginx-phpfpm-svc created

    ## Check the service is created or not
    13. thor@jump_host ~$ kubectl get svc 
        NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
        kubernetes         ClusterIP   10.96.0.1       <none>        443/TCP          123m
        nginx-phpfpm-svc   NodePort    10.96.209.243   <none>        8095:30012/TCP   18s

    ## Access the Pod using Curl command
    14. curl -k http://localhost:30012
        It works!