The Nautilus Application development team has finished development of one of the applications and it is ready for deployment. It is a guestbook application that will be used to manage entries for guests/visitors. As per discussion with the DevOps team, they have finalized the infrastructure that will be deployed on Kubernetes cluster. Below you can find more details about it.


BACK-END TIER

Create a deployment named redis-master for Redis master.

a.) Replicas count should be 1.

b.) Container name should be master-redis-devops and it should use image redis.

c.) Request resources as CPU should be 100m and Memory should be 100Mi.

d.) Container port should be redis default port i.e 6379.

Create a service named redis-master for Redis master. Port and targetPort should be Redis default port i.e 6379.

Create another deployment named redis-slave for Redis slave.

a.) Replicas count should be 2.

b.) Container name should be slave-redis-devops and it should use gcr.io/google_samples/gb-redisslave:v3 image.

c.) Requests resources as CPU should be 100m and Memory should be 100Mi.

d.) Define an environment variable named GET_HOSTS_FROM and its value should be dns.

e.) Container port should be Redis default port i.e 6379.

Create another service named redis-slave. It should use Redis default port i.e 6379.

FRONT END TIER

Create a deployment named frontend.

a.) Replicas count should be 3.

b.) Container name should be php-redis-devops and it should use gcr.io/google-samples/gb-frontend@sha256:cbc8ef4b0a2d0b95965e0e7dc8938c270ea98e34ec9d60ea64b2d5f2df2dfbbf image.

c.) Request resources as CPU should be 100m and Memory should be 100Mi.

d.) Define an environment variable named as GET_HOSTS_FROM and its value should be dns.

e.) Container port should be 80.

Create a service named frontend. Its type should be NodePort, port should be 80 and its nodePort should be 30009.

Finally, you can check the guestbook app by clicking on App button.


You can use any labels as per your choice.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Check the number of nodes are up and running
    1. thor@jump_host ~$ kubectl get nodes
       NAME                      STATUS   ROLES           AGE   VERSION
       kodekloud-control-plane   Ready    control-plane   39m   v1.27.3-44+b5c876a05b7bbd

    ## Write redis-master-deployment.yaml file to create a redis-master deployment
    2. thor@jump_host ~$ vi redis-master-deployment.yaml

       apiVersion: apps/v1
       kind: Deployment
       metadata:
         name: redis-master
       spec:
         replicas: 1
         selector:
           matchLabels:
             app: redis-master-app
         template:
           metadata:
             labels:
               app: redis-master-app
           spec:
             containers:
             - name: master-redis-devops
               image: redis
               resources:
                 requests:
                   memory: "100Mi"
                   cpu: "100m"
               ports:
               - containerPort: 6379
    
    ## Apply the redis-master-deployment.yaml file to create a redis-master deployment
    3. thor@jump_host ~$ kubectl apply -f redis-master-deployment.yaml
       deployment.apps/redis-master created

    ## Check the redis-master deployment and pods
    4. thor@jump_host ~$ kubectl get deploy
       NAME           READY   UP-TO-DATE   AVAILABLE   AGE
       redis-master   1/1     1            1           23s
       thor@jump_host ~$ kubectl get pods
       NAME                            READY   STATUS    RESTARTS   AGE
       redis-master-5cbff7f9c9-s7khc   1/1     Running   0          30s

    ## Write redis-master-service.yaml file to create redis-master service
    5. thor@jump_host ~$ vi redis-master-service.yaml

       apiVersion: v1
       kind: Service
       metadata:
         name: redis-master
       spec:
         type: ClusterIP
         selector:
           app: redis-master-app
         ports:
         - port: 6379
           targetPort: 6379

    ## Apply the redis-master-service.yaml file to create redis-master service
    6. thor@jump_host ~$ kubectl apply -f redis-master-service.yaml
       service/redis-master created

    ## Check the redis-master service
    7. thor@jump_host ~$ kubectl get svc
       NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
       kubernetes     ClusterIP   10.96.0.1       <none>        443/TCP    43m
       redis-master   ClusterIP   10.96.117.217   <none>        6379/TCP   23s

    ## Write redis-slave-deployment.yaml file to create redis-slave deployment
    8. thor@jump_host ~$ vi redis-slave-deployment.yaml

       apiVersion: apps/v1
       kind: Deployment
       metadata:
         name: redis-slave
       spec:
         replicas: 2
         selector:
           matchLabels:
             app: redis-slave-app
         template:
           metadata:
             labels:
               app: redis-slave-app
           spec:
             containers:
             - name: slave-redis-devops
               image: gcr.io/google_samples/gb-redisslave:v3
               resources:
                 requests:
                   memory: "100Mi"
                   cpu: "100m"
               ports:
               - containerPort: 6379
       		env:
       		   - name: GET_HOSTS_FROM
       		     value: dns

    ## Apply the redis-slave-deployment.yaml file to create redis-slave deployment
    9. thor@jump_host ~$ kubectl apply -f redis-slave-deployment.yaml
       deployment.apps/redis-slave created

    ## Check the redis-slave deployment and pods
    10. thor@jump_host ~$ kubectl get deploy
        NAME           READY   UP-TO-DATE   AVAILABLE   AGE
        redis-master   1/1     1            1           7m30s
        redis-slave    2/2     2            2           28s
        thor@jump_host ~$ kubectl get pods
        NAME                            READY   STATUS    RESTARTS   AGE
        redis-master-5cbff7f9c9-s7khc   1/1     Running   0          7m42s
        redis-slave-85f794888-hmcd9     1/1     Running   0          40s
        redis-slave-85f794888-hph5s     1/1     Running   0          40s

    ## Write redis-slave-service.yaml file to create redis-slave service
        thor@jump_host ~$ vi redis-slave-service.yaml
    11. apiVersion: v1
        kind: Service
        metadata:
          name: redis-slave
        spec:
          type: ClusterIP
          selector:
            app: redis-slave-app
          ports:
          - port: 80
            targetPort: 6379

    ## Apply the redis-slave-service.yaml file to create redis-slave service
    12. thor@jump_host ~$ kubectl apply -f redis-slave-service.yaml
        service/redis-slave created

    ## Check the redis-slave service
    13. thor@jump_host ~$ kubectl get svc
        NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
        kubernetes     ClusterIP   10.96.0.1       <none>        443/TCP    51m
        redis-master   ClusterIP   10.96.117.217   <none>        6379/TCP   8m34s
        redis-slave    ClusterIP   10.96.127.145   <none>        80/TCP     31s
    
    ## Write frontend-deployment.yaml file to create the frontend deployment
    14. thor@jump_host ~$ vi frontend-deployment.yaml

        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: frontend-app
          template:
            metadata:
              labels:
                app: frontend-app
            spec:
              containers:
              - name: php-redis-devops
                image: gcr.io/google-samples/gb-frontend@sha256:cbc8ef4b0a2d0b95965e0e7dc8938c270ea98e34ec9d60ea64b2d5f2df2dfbbf
                resources:
                  requests:
                    memory: "100Mi"
                    cpu: "100m"
                ports:
                - containerPort: 80
                env:
                  - name: GET_HOSTS_FROM
                    value: dns
    
    ## Apply the frontend-deployment.yaml file to create the frontend deployment
    15. thor@jump_host ~$ kubectl apply -f frontend-deployment.yaml
        deployment.apps/frontend created

    ## Check the frontend deployment and pods
    16. thor@jump_host ~$ kubectl get deploy
        NAME           READY   UP-TO-DATE   AVAILABLE   AGE
        frontend       3/3     3            3           25s
        redis-master   1/1     1            1           14m
        redis-slave    2/2     2            2           7m13s
        
        thor@jump_host ~$ kubectl get pods
        NAME                            READY   STATUS    RESTARTS   AGE
        frontend-5b7d6b8d4-d5jzr        1/1     Running   0          42s
        frontend-5b7d6b8d4-mxxkw        1/1     Running   0          42s
        frontend-5b7d6b8d4-x8599        1/1     Running   0          42s
        redis-master-5cbff7f9c9-s7khc   1/1     Running   0          14m
        redis-slave-85f794888-hmcd9     1/1     Running   0          7m30s
        redis-slave-85f794888-hph5s     1/1     Running   0          7m30s

    ## Write frontend-service.yaml file to create frontend service
    17. thor@jump_host ~$ vi frontend-service.yaml

        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
        spec:
          selector:
            app: frontend-app
          type: NodePort
          ports:
          - port: 80
            targetPort: 80
            nodePort: 30009

    ## Apply the frontend-service.yaml file to create frontend service
    18. thor@jump_host ~$ kubectl apply -f frontend-service.yaml
        service/frontend created

    ## Check the frontend service
    19. thor@jump_host ~$ kubectl get svc
        NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
        frontend       NodePort    10.96.138.133   <none>        80:30009/TCP   23s
        kubernetes     ClusterIP   10.96.0.1       <none>        443/TCP        57m
        redis-master   ClusterIP   10.96.117.217   <none>        6379/TCP       14m
        redis-slave    ClusterIP   10.96.127.145   <none>        80/TCP         6m24s

    ## Check the environment variable for redis-slave and frontend pods
    20. thor@jump_host ~$ kubectl exec -it redis-slave-85f794888-hph5s -- printenv | grep -i GET_HOSTS_FROM
        GET_HOSTS_FROM=dns
        
        thor@jump_host ~$ kubectl exec -it frontend-5b7d6b8d4-d5jzr -- printenv | grep -i GET_HOSTS_FROM
        GET_HOSTS_FROM=dns

    ## Access the application using curl command
    21. curl -k http://localhost:30009

    ## Access the Application using NodeIP and NodePort
    22. http://NodeIP:30009

    ## Check the logs of the frontend application after access the application
    23. thor@jump_host ~$ kubectl logs -f frontend-5b7d6b8d4-d5jzr
        AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 10.244.0.8. Set the 'ServerName' directive globally to suppress this message
        AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 10.244.0.8. Set the 'ServerName' directive globally to suppress this message
        [Tue Feb 13 01:35:11.942044 2024] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/5.6.37 configured -- resuming normal operations
        [Tue Feb 13 01:35:11.942111 2024] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'
        10.244.0.1 - - [13/Feb/2024:01:38:07 +0000] "GET /controllers.js HTTP/1.1" 200 712 "https://30009-port-99b0ef3caed84355.labs.kodekloud.com/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
