A new java-based application is ready to be deployed on a Kubernetes cluster. The development team had a meeting with the DevOps team to share the requirements and application scope. The team is ready to setup an application stack for it under their existing cluster. Below you can find the details for this:


Create a namespace named tomcat-namespace-nautilus.

Create a deployment for tomcat app which should be named as tomcat-deployment-nautilus under the same namespace you created. Replica count should be 1, the container should be named as tomcat-container-nautilus, its image should be gcr.io/kodekloud/centos-ssh-enabled:tomcat and its container port should be 8080.

Create a service for tomcat app which should be named as tomcat-service-nautilus under the same namespace you created. Service type should be NodePort and nodePort should be 32227.


Before clicking on Check button please make sure the application is up and running.


You can use any labels as per your choice.


Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## Create the tomcat-namespace-nautilus namespace
    2. kubectl create ns tomcat-namespace-nautilus

    ## Check whether the namespace is created or not 
    3. kubectl get ns
    
    ## Write a tomcat-deployment-nautilus.yaml to create tomcat-deployment-nautilus deployment
    4. vi tomcat-deployment-nautilus.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          creationTimestamp: null
          labels:
            app: tomcat-deployment-nautilus
          name: tomcat-deployment-nautilus
          namespace: tomcat-namespace-nautilus
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: tomcat-deployment-nautilus
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: tomcat-deployment-nautilus
            spec:
              containers:
              - image: gcr.io/kodekloud/centos-ssh-enabled:tomcat
                name: tomcat-container-nautilus
                ports:
                - containerPort: 8080
                resources: {}
        status: {}

    ## Apply tomcat-deployment-nautilus.yaml to create tomcat-deployment-nautilus deployment
    5. kubectl apply -f tomcat-deployment-nautilus.yaml

    ## Check whether Deployment & Pods are Up and Running or not 
    6. kubectl get all -n tomcat-namespace-nautilus
       Once All Pods are up and running create the service to expose the application

    ## Write tomcat-service-nautilus.yaml file for creating tomcat-service-nautilus service
    7. vi tomcat-service-nautilus.yaml
       apiVersion: v1
       kind: Service
       metadata:
         name: tomcat-service-nautilus
         namespace: tomcat-namespace-nautilus
       spec:
         type: NodePort
         selector:
           app: tomcat-deployment-nautilus
         ports:
         - port: 80
           targetPort: 8080
           nodePort: 32227

    ## Apply the tomcat-service-nautilus.yaml file for creating tomcat-service-nautilus service
    8. kubectl apply -f tomcat-service-nautilus.yaml
    
    ## Check whether the service create successfully or not
    9. kubectl get svc -n tomcat-namespace-nautilus
       once the service is exposed to node port. Take the Node IP and NodePort Number to access the application. 