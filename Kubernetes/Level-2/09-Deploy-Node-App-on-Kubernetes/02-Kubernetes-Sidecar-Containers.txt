We have a web server container running the nginx image. The access and error logs generated by the web server are not critical enough to be placed on a persistent volume. However, Nautilus developers need access to the last 24 hours of logs so that they can trace issues and bugs. Therefore, we need to ship the access and error logs for the web server to a log-aggregation service. Following the separation of concerns principle, we implement the Sidecar pattern by deploying a second container that ships the error and access logs from nginx. Nginx does one thing, and it does it well—serving web pages. The second container also specializes in its task—shipping logs. Since containers are running on the same Pod, we can use a shared emptyDir volume to read and write logs.


Create a pod named webserver.

Create an emptyDir volume shared-logs.

Create two containers from nginx and ubuntu images with latest tag only and remember to mention tag i.e nginx:latest, nginx container name should be nginx-container and ubuntu container name should be sidecar-container on webserver pod.

Add command on sidecar-container "sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"

Mount the volume shared-logs on both containers at location /var/log/nginx, all containers should be up and running.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## Write the webserver.yaml file for pod create
    2.  apiVersion: v1
        kind: Pod
        metadata:
          creationTimestamp: null
          labels:
            run: webserver
          name: webserver
        spec:
          containers:
          - image: nginx:latest
            name: nginx-container
            volumeMounts:
            - name: shared-logs
              mountPath: /var/log/nginx
            resources: {}
          - image: ubuntu:latest
            name: sidecar-container
            command: ["sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"]
            volumeMounts:
            - name: shared-logs
              mountPath: /var/log/nginx
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          volumes:
          - name: shared-logs
            emptyDir: {}
        status: {}

    ## Apply the File to create the pod
    3. kubectl apply -f webserver.yaml

    ## Check the Pods are up and running or not
    4. kubectl get pods
       once Pods are up and running needs to verify whether the both the containers are sharing same mount path or not

    ## Log into the container sidecar-container in pod webserver to check whether the both the containers are sharing same mount path or not
    5. kubectl exec -it webserver -c sidecar-container -- bash
       ls -larth /var/log/nginx
       there you will see access.log error.log file these are coming from nginx container as both containers are sharing the same volume mounts