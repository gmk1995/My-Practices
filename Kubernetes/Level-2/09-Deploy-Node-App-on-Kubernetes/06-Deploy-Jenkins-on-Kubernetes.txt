The Nautilus DevOps team is planning to set up a Jenkins CI server to create/manage some deployment pipelines for some of the projects. They want to set up the Jenkins server on Kubernetes cluster. Below you can find more details about the task:


1) Create a namespace jenkins

2) Create a Service for jenkins deployment. Service name should be jenkins-service under jenkins namespace, type should be NodePort, nodePort should be 30008

3) Create a Jenkins Deployment under jenkins namespace, It should be name as jenkins-deployment , labels app should be jenkins , container name should be jenkins-container , use jenkins/jenkins image , containerPort should be 8080 and replicas count should be 1.


Make sure to wait for the pods to be in running state and make sure you are able to access the Jenkins login screen in the browser before hitting the Check button.


Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## create a jenkins namespace
    2. kubectl create ns jenkins

    ## Check whether the Jenkins namespace is created or not
    3. kubectl get ns

    ## Write a jenkins-service.yaml to create the NodePort service
    4. vi jenkins-service.yaml
        apiVersion: v1
        kind: Service
        metadata:
           name: jenkins-service
           namespace: jenkins
        spec:
           type: NodePort
           selector:
              app: jenkins
           ports:
           - port: 80
             targetPort: 8080
             nodePort: 30008

    ## Apply the jenkins-service.yaml to create the NodePort service
    5. kubectl apply -f jenkins-service.yaml

    ## Check whether the service is created or not
    6. kubectl get svc -n jenkins

    ## Write jenkins-deployment.yaml file to create the jenkins deployment
    7. vi jenkins-deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
        creationTimestamp: null
        labels:
            app: jenkins
        name: jenkins-deployment
        namespace: jenkins
        spec:
        replicas: 1
        selector:
            matchLabels:
            app: jenkins
        strategy: {}
        template:
            metadata:
            creationTimestamp: null
            labels:
                app: jenkins
            spec:
            containers:
            - image: jenkins/jenkins
                name: jenkins-container
                ports:
                - containerPort: 8080
                resources: {}
        status: {}

    ## Apply the jenkins-deployment.yaml file to create the jenkins deployment
    8. kubectl apply -f jenkins-deployment.yaml

    ## Check Pods and Deployment is created and running successfully or not 
    9. kubectl get deployment -n jenkins && kubectl get pods -n jenkins
       Once the pods are up and running we can access Jenins Web App using Node IP with NodePort 