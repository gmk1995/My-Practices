There are a number of parameters that are used by the applications. We need to define these as environment variables, so that we can use them as needed within different configs. Below is a scenario which needs to be configured on Kubernetes cluster. Please find below more details about the same.


Create a pod named envars.

Container name should be fieldref-container, use image redis preferable latest tag, use command 'sh', '-c' and args should be

'while true; do echo -en '/n'; printenv NODE_NAME POD_NAME; printenv POD_IP POD_SERVICE_ACCOUNT; sleep 10; done;'

(Note: please take care of indentations)

Define Four environment variables as mentioned below:
a.) The first env should be named as NODE_NAME, set valueFrom fieldref and fieldPath should be spec.nodeName.

b.) The second env should be named as POD_NAME, set valueFrom fieldref and fieldPath should be metadata.name.

c.) The third env should be named as POD_IP, set valueFrom fieldref and fieldPath should be status.podIP.

d.) The fourth env should be named as POD_SERVICE_ACCOUNT, set valueFrom fieldref and fieldPath shoulbe be spec.serviceAccountName.

Set restart policy to Never.

To check the output, exec into the pod and use printenv command.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## Write a envars.yaml kubernetes mainfest file
    2. apiVersion: v1
       kind: Pod
       metadata:
         name: envars
         labels:
           purpose: envars
       spec:
         containers:
         - name: fieldref-container
           image: redis:latest
           env:
           - name: NODE_NAME
             valueFrom:
               fieldRef:
                 fieldPath: spec.nodeName
           - name: POD_NAME
             valueFrom:
               fieldRef:
                 fieldPath: metadata.name
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
           - name: POD_SERVICE_ACCOUNT
             valueFrom:
               fieldRef:
                 fieldPath: spec.serviceAccountName
           command: ["sh", "-c"]
           args: ["while true; do echo -en '\n'; printenv NODE_NAME POD_NAME; printenv POD_IP POD_SERVICE_ACCOUNT; sleep 10; done;"]
         restartPolicy: Never
       
    ## Apply the envars.yaml to create the envars pod
    3. kubectl apply -f envars.yaml
       pod/envars created

    ## Check the Pod is running or not
    4. thor@jump_host ~$ kubectl get pod
       NAME     READY   STATUS    RESTARTS   AGE
       envars   1/1     Running   0          15s

    ## Check the Logs of envars pod for environment variables are getting correct or not
    5. thor@jump_host ~$ kubectl logs -f envars
       -en 
       
       kodekloud-control-plane
       envars
       10.244.0.6
       default