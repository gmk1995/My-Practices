There is an iron gallery app that the Nautilus DevOps team was developing. They have recently customized the app and are going to deploy the same on the Kubernetes cluster. Below you can find more details:



Create a namespace iron-namespace-xfusion

Create a deployment iron-gallery-deployment-xfusion for iron gallery under the same namespace you created.

:- Labels run should be iron-gallery.

:- Replicas count should be 1.

:- Selector's matchLabels run should be iron-gallery.

:- Template labels run should be iron-gallery under metadata.

:- The container should be named as iron-gallery-container-xfusion, use kodekloud/irongallery:2.0 image ( use exact image name / tag ).

:- Resources limits for memory should be 100Mi and for CPU should be 50m.

:- First volumeMount name should be config, its mountPath should be /usr/share/nginx/html/data.

:- Second volumeMount name should be images, its mountPath should be /usr/share/nginx/html/uploads.

:- First volume name should be config and give it emptyDir and second volume name should be images, also give it emptyDir.

Create a deployment iron-db-deployment-xfusion for iron db under the same namespace.

:- Labels db should be mariadb.

:- Replicas count should be 1.

:- Selector's matchLabels db should be mariadb.

:- Template labels db should be mariadb under metadata.

:- The container name should be iron-db-container-xfusion, use kodekloud/irondb:2.0 image ( use exact image name / tag ).

:- Define environment, set MYSQL_DATABASE its value should be database_web, set MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD value should be with some complex passwords for DB connections, and MYSQL_USER value should be any custom user ( except root ).

:- Volume mount name should be db and its mountPath should be /var/lib/mysql. Volume name should be db and give it an emptyDir.

Create a service for iron db which should be named iron-db-service-xfusion under the same namespace. Configure spec as selector's db should be mariadb. Protocol should be TCP, port and targetPort should be 3306 and its type should be ClusterIP.

Create a service for iron gallery which should be named iron-gallery-service-xfusion under the same namespace. Configure spec as selector's run should be iron-gallery. Protocol should be TCP, port and targetPort should be 80, nodePort should be 32678 and its type should be NodePort.


Note:


We don't need to make connection b/w database and front-end now, if the installation page is coming up it should be enough for now.

The kubectl on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## Create namespace iron-namespace-xfusion
    2. thor@jump_host ~$ kubectl create ns iron-namespace-xfusion
       namespace/iron-namespace-xfusion created
       thor@jump_host ~$ kubectl get ns 
       NAME                     STATUS   AGE
       default                  Active   94m
       iron-namespace-xfusion   Active   5s
       kube-node-lease          Active   94m
       kube-public              Active   94m
       kube-system              Active   94m
       local-path-storage       Active   94m

    ## create a deployment iron-gallery-deployment-xfusion manifest iron-gallery-deployment-xfusion.yaml file
    3. thor@jump_host ~$ vi iron-gallery-deployment-xfusion.yaml
       apiVersion: apps/v1
       kind: Deployment
       metadata:
         name: iron-gallery-deployment-xfusion
         namespace: iron-namespace-xfusion
         labels:
           run: iron-gallery
       spec:
         replicas: 1
         selector:
           matchLabels:
             run: iron-gallery
         template:
           metadata:
             labels:
               run: iron-gallery
           spec:
             containers:
             - name: iron-gallery-container-xfusion
               image: kodekloud/irongallery:2.0
               resources:
                 limits:
                   memory: "100Mi"
                   cpu: "50m"
               volumeMounts:
                 - name: config
                   mountPath: /usr/share/nginx/html/data
                 - name: images
                   mountPath: /usr/share/nginx/html/uploads
             volumes:
               - name: config
                 emptyDir: {}
               - name: images
                 emptyDir: {}
    
    ## Apply the iron-gallery-deployment-xfusion.yaml file to create the iron-gallery-deployment-xfusion deployment
    4. thor@jump_host ~$ kubectl apply -f iron-gallery-deployment-xfusion.yaml
       deployment.apps/iron-gallery-deployment-xfusion created
       
       thor@jump_host ~$ kubectl get all -n iron-namespace-xfusion
       NAME                                                  READY   STATUS    RESTARTS   AGE
       pod/iron-gallery-deployment-xfusion-84f869c4b-7jp4p   1/1     Running   0          43s
       
       NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE
       deployment.apps/iron-gallery-deployment-xfusion   1/1     1            1           43s
       
       NAME                                                        DESIRED   CURRENT   READY   AGE
       replicaset.apps/iron-gallery-deployment-xfusion-84f869c4b   1         1         1       43s

    ## Create a iron-db-deployment-xfusion.yaml manifest file to create a iron-db-deployment-xfusion deployment
    5. thor@jump_host ~$ vi iron-db-deployment-xfusion.yaml
       apiVersion: apps/v1
       kind: Deployment
       metadata:
         name: iron-db-deployment-xfusion
         namespace: iron-namespace-xfusion
         labels:
           db: mariadb
       spec:
         replicas: 1
         selector:
           matchLabels:
             db: mariadb
         template:
           metadata:
             labels:
               db: mariadb
           spec:
             containers:
             - name: iron-db-container-xfusion
               image: kodekloud/irondb:2.0
               env:
               - name: MYSQL_DATABASE
                 value: database_web
               - name: MYSQL_ROOT_PASSWORD
                 value: dbrootuser@2024
               - name: MYSQL_PASSWORD
                 value: dbuser@2024
               - name: MYSQL_USER
                 value: mohan
               volumeMounts:
                 - name: db
                   mountPath: /var/lib/mysql
             volumes:
               - name: db
                 emptyDir: {}

    ## Apply the iron-db-deployment-xfusion.yaml manifest file to create a iron-db-deployment-xfusion deployment
    6. thor@jump_host ~$ kubectl apply -f iron-db-deployment-xfusion.yaml
       deployment.apps/iron-db-deployment-xfusion created
       
       thor@jump_host ~$ kubectl get all -n iron-namespace-xfusion
       NAME                                                   READY   STATUS    RESTARTS   AGE
       pod/iron-db-deployment-xfusion-6f4b4b87b9-vhbc4        1/1     Running   0          2m58s
       pod/iron-gallery-deployment-xfusion-785f55d854-4fv5m   1/1     Running   0          12m
       
       NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE
       deployment.apps/iron-db-deployment-xfusion        1/1     1            1           2m59s
       deployment.apps/iron-gallery-deployment-xfusion   1/1     1            1           16m
       
       NAME                                                         DESIRED   CURRENT   READY   AGE
       replicaset.apps/iron-db-deployment-xfusion-6f4b4b87b9        1         1         1       2m58s
       replicaset.apps/iron-gallery-deployment-xfusion-785f55d854   1         1         1       12m

    ## Create a iron-db-service-xfusion.yaml for creating iron-db-service-xfusion service
    7. thor@jump_host ~$ vi iron-db-service-xfusion.yaml
       apiVersion: v1
       kind: Service
       metadata:
         name: iron-db-service-xfusion
         namespace: iron-namespace-xfusion
       spec:
         selector:
           db: mariadb
         type: ClusterIP
         ports:
         - port: 3306
           targetPort: 3306
           protocol: TCP
    
    ## Apply the iron-db-service-xfusion.yaml for creating iron-db-service-xfusion service
    8. thor@jump_host ~$ kubectl apply -f iron-db-service-xfusion.yaml
       service/iron-db-service-xfusion created
       
       thor@jump_host ~$ kubectl get svc -n iron-namespace-xfusion
       NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
       iron-db-service-xfusion   ClusterIP   10.96.138.158   <none>        3306/TCP    43s

    ## create iron-gallery-service-xfusion.yaml manifest file to create iron-gallery-service-xfusion service
    9. thor@jump_host ~$ vi iron-gallery-service-xfusion.yaml
       apiVersion: v1
       kind: Service
       metadata:
         name: iron-gallery-service-xfusion
         namespace: iron-namespace-xfusion
       spec:
         selector:
           run: iron-gallery
         type: NodePort
         ports:
         - port: 80
           targetPort: 80
           nodePort: 32678
           protocol: TCP

    ## Apply the iron-gallery-service-xfusion.yaml manifest file to create iron-gallery-service-xfusion service
    10. thor@jump_host ~$ kubectl apply -f iron-gallery-service-xfusion.yaml
        service/iron-gallery-service-xfusion created
        
        thor@jump_host ~$ kubectl get svc -n iron-namespace-xfusion
        NAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
        iron-db-service-xfusion        ClusterIP   10.96.138.158   <none>        80/TCP         4m39s
        iron-gallery-service-xfusion   NodePort    10.96.153.79    <none>        80:32678/TCP   16s

    ## Access the application
    11. Take the NodePort Number 32678 and Node IPaddress to access the App.