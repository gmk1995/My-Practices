he Nautilus DevOps team want to deploy a static website on Kubernetes cluster. They are going to use Nginx, phpfpm and MySQL for the database. The team had already gathered the requirements and now they want to make this website live. Below you can find more details:



Create some secrets for MySQL.

Create a secret named mysql-root-pass wih key/value pairs as below:

name: password
value: R00t



Create a secret named mysql-user-pass with key/value pairs as below:

name: username
value: kodekloud_aim

name: password
value: LQfKeWWxWD



Create a secret named mysql-db-url with key/value pairs as below:

name: database
value: kodekloud_db4



Create a secret named mysql-host with key/value pairs as below:

name: host
value: mysql-service



Create a config map php-config for php.ini with variables_order = "EGPCS" data.

Create a deployment named lemp-wp.


Create two containers under it. First container must be nginx-php-container using image webdevops/php-nginx:alpine-3-php7 and second container must be mysql-container from image mysql:5.6. Mount php-config configmap in nginx container at /opt/docker/etc/php/php.ini location.


5) Add some environment variables for both containers:


MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD and MYSQL_HOST. Take their values from the secrets you created. Please make sure to use env field (do not use envFrom) to define the name-value pair of environment variables.

6) Create a node port type service lemp-service to expose the web application, nodePort must be 30008.


7) Create a service for mysql named mysql-service and its port must be 3306.


We already have a /tmp/index.php file on jump_host server.


Copy this file into the nginx container under document root i.e /app and replace the dummy values for mysql related variables with the environment variables you have set for mysql related parameters. Please make sure you do not hard code the mysql related details in this file, you must use the environment variables to fetch those values.


Once done, you must be able to access this website using Website button on the top bar, please note that you should see Connected successfully message while accessing this page.


Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.

Ans)
    ## Log into the jump_host 
    1. ssh thor@jump_host

    ## Create secrets
    2. thor@jump_host ~$ kubectl create secret generic mysql-root-pass --from-literal=password=R00t && kubectl create secret generic mysql-user-pass --from-literal=username=kodekloud_gem --from-literal=password=BruCStnMT5 && kubectl create secret generic mysql-db-url --from-literal=database=kodekloud_db10 && kubectl create secret generic mysql-host --from-literal=host=mysql-service
       secret/mysql-root-pass created
       secret/mysql-user-pass created
       secret/mysql-db-url created
       secret/mysql-host created

    ## Create a php-config configmap
    3. thor@jump_host ~$ vi php-config.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: php-config
        data:
          php.ini: |
            variables_order = "EGPCS"

    ## Apply the  php-config.yaml file to create php-config configmap
    4.  thor@jump_host ~$ kubectl apply -f php-config.yaml
        configmap/php-config created
        thor@jump_host ~$ kubectl get cm
        NAME               DATA   AGE
        kube-root-ca.crt   1      19m
        php-config         1      7s

    ## Create lemp-wp.yaml for lemp-wp deployment, lemp-service, mysql-service
    5. vi lemp-wp.yaml
       apiVersion: apps/v1
       kind: Deployment
       metadata:
         name: lemp-wp
       spec:
         replicas: 1
         selector:
           matchLabels:
             app: lemp-wp
         template:
           metadata:
             labels:
               app: lemp-wp
           spec:
             containers:
             - name: nginx-php-container
               image: webdevops/php-nginx:alpine-3-php7
               volumeMounts:
               - name: php-config-volume
                 mountPath: /opt/docker/etc/php/php.ini
                 subPath: php.ini
               env:
               - name: MYSQL_ROOT_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-root-pass
                     key: password
               - name: MYSQL_DATABASE
                 valueFrom:
                   secretKeyRef:
                     name: mysql-db-url
                     key: database
               - name: MYSQL_USER
                 valueFrom:
                   secretKeyRef:
                     name: mysql-user-pass
                     key: username
               - name: MYSQL_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-user-pass
                     key: password
               - name: MYSQL_HOST
                 valueFrom:
                   secretKeyRef:
                     name: mysql-host
                     key: host
             - name: mysql-container
               image: mysql:5.6
               env:
               - name: MYSQL_ROOT_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-root-pass
                     key: password
               - name: MYSQL_DATABASE
                 valueFrom:
                   secretKeyRef:
                     name: mysql-db-url
                     key: database
               - name: MYSQL_USER
                 valueFrom:
                   secretKeyRef:
                     name: mysql-user-pass
                     key: username
               - name: MYSQL_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-user-pass
                     key: password
               - name: MYSQL_HOST
                 valueFrom:
                   secretKeyRef:
                     name: mysql-host
                     key: host
             volumes:
             - name: php-config-volume
               configMap:
                 name: php-config
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: lemp-service
       spec:
         type: NodePort
         selector:
           app: lemp-wp
         ports:
         - protocol: TCP
           port: 80
           targetPort: 80
           nodePort: 30008
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: mysql-service
       spec:
         selector:
           app: lemp-wp
         ports:
         - protocol: TCP
           port: 3306

    ## Apply the lemp-wp.yaml file to create the lemp-wp, lemp-service, and mysql-service
    6. thor@jump_host ~$ kubectl apply -f lemp-wp.yaml
       deployment.apps/lemp-wp created
       service/lemp-service created
       service/mysql-service created
       
        kubectl get all
       NAME                           READY   STATUS    RESTARTS   AGE
       pod/lemp-wp-56cf9b4485-wd2ml   2/2     Running   0          112s
       
       NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
       service/kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP        22m
       service/lemp-service    NodePort    10.96.90.159    <none>        80:30008/TCP   112s
       service/mysql-service   ClusterIP   10.96.249.105   <none>        3306/TCP       112s
       
       NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
       deployment.apps/lemp-wp   1/1     1            1           112s
       
       NAME                                 DESIRED   CURRENT   READY   AGE
       replicaset.apps/lemp-wp-56cf9b4485   1         1         1       112s
       thor@jump_host ~$ kubectl cp /tmp/index.php lemp-wp-56cf9b4485-wd2ml:/app -c nginx-php-container

    ## Edit the /tmp/index.php file with MYSQL Details
    7. vi /tmp/index.php
       
       <?php

       $dbname = $_ENV["MYSQL_DATABASE"];
       $dbuser = $_ENV["MYSQL_USER"];
       $dbpass = $_ENV["MYSQL_PASSWORD"];
       $dbhost = $_ENV["MYSQL_HOST"];
       
       $connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");
       
       $test_query = "SHOW TABLES FROM $dbname";
       $result = mysqli_query($test_query);
       
       if ($result->connect_error) {
          die("Connection failed: " . $conn->connect_error);
       }
         echo "Connected successfully";

    ## Copy the /tmp/index.php file to ngnix container
    8. thor@jump_host ~$ kubectl cp /tmp/index.php lemp-wp-56cf9b4485-wd2ml:/app -c nginx-php-container

    ## Verify /tmp/index.php copied successfully or not by log into container
    9. thor@jump_host ~$ kubectl exec -it lemp-wp-56cf9b4485-wd2ml -c nginx-php-container -- bash
       bash-4.3# cd /app
       bash-4.3# ls -larth
       total 12
       drwxr-xr-x    1 root     root        4.0K Jan 28 12:44 ..
       -rw-r--r--    1 root     root         434 Jan 28 12:46 index.php
       drwxr-xr-x    1 applicat applicat    4.0K Jan 28 12:46 .
       bash-4.3#

    ## Take the NodePort IP address and the NodePort 30008 to access the application
    10. http://NodePortIP:30008
        

     