The DevOps team was looking for a solution where they want to restart Apache service on all app servers if the deployment goes fine on these servers in Stratos Datacenter. After having a discussion, they came up with a solution to use Jenkins chained builds so that they can use a downstream job for services which should only be triggered by the deployment job. So as per the requirements mentioned below configure the required Jenkins jobs.



Click on the Jenkins button on the top bar to access the Jenkins UI. Login using username admin and Adm!n321 password.


Similarly you can access Gitea UI on port 8090 and username and password for Git is sarah and Sarah_pass123 respectively. Under user sarah you will find a repository named web.


Apache is already installed and configured on all app server so no changes are needed there. The doc root /var/www/html on all these app servers is shared among the Storage server under /var/www/html directory.


1. Create a Jenkins job named  and configure it to pull change from the master branch of web repository on Storage server under /var/www/html directory, which is already a local git repository tracking the origin web repository. Since /var/www/html on Storage server is a shared volume so changes should auto reflect on all apps.


2. Create another Jenkins job named manage-services and make it a downstream job for nautilus-app-deployment job. Things to take care about this job are:


a. This job should restart httpd service on all app servers.

b. Trigger this job only if the upstream job i.e nautilus-app-deployment is stable.


LB server is already configured. Click on the App button on the top bar to access the app. You should be able to see the latest changes you made. Please make sure the required content is loading on the main URL https://<LBR-URL> i.e there should not be a sub-directory like https://<LBR-URL>/web etc.


Note:


1. You might need to install some plugins and restart Jenkins service. So, we recommend clicking on Restart Jenkins when installation is complete and no jobs are running on plugin installation/update page i.e update centre. Also some times Jenkins UI gets stuck when Jenkins service restarts in the back end so in such case please make sure to refresh the UI page.


2. Make sure Jenkins job passes even on repetitive runs as validation may try to build the job multiple times.


3. Deployment related tasks should be done by sudo user on the destination server to avoid any permission issues so make sure to configure your Jenkins job accordingly.


4. For these kind of scenarios requiring changes to be done in a web UI, please take screenshots so that you can share it with us for review in case your task is marked incomplete. You may also consider using a screen recording software such as loom.com to record and share your work.

Ans)
   
    ## Log into the Jenins UI
    1. username admin and password Adm!n321

    ## Add SSH Build plugin
    2. Manage Jenkins -> Manage plugins -> Available plugins -> select "Pipeline,Pipeline: Declarative, Pipeline: Declarative Pipeline: Groovy, Pipeline: Groovy Libraries, Pipeline: Job,  Pipeline: SCM Step, Pipeline: Stage Step, Pipeline: Stage Tags Metadata, Pipeline: Step API, Pipeline: Supporting APIs, SSH Agent Plugin, SSH Build Agents plugin, SSH Credentials Plugin, git, credentials " -> install -> Restart Jenkins when installation is complete and no jobs are running on plugin installation/update

    ## Add Gitea Username and Password in the Jenkins Credentials
    3. Manage Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add New credentials -> Select kind Username and password -> username sarah -> password Sarah_pass123 -> id GITEA_CRED -> description -> save

    ## Log into the Gitea and copy the Gitea web repo URL
    4. Username: sarah Password: Sarah_pass123 Repo-URL: http://git.stratos.xfusioncorp.com/sarah/web.git

    
    ## Create a New nautilus-app-deployment Jenkins Job
    5. Click on "New Item" to create a new job -> Enter a name for your job, such as "nautilus-app-deployment." -> Select "Freestyle project" and click "OK."

    ## Configure the nautilus-app-deployment jenkins job
    6. In the configuration:
        Choose "Git" under Source Code Management.
        Enter the repository URL: http://git.stratos.xfusioncorp.com/sarah/web.git
        Add a build step: "Execute shell" and enter the script:

        #!/bin/bash
        sshpass -p "Bl@kW" ssh -o StrictHostKeyChecking=no natasha@ststor01 "cd /var/www/html && git pull origin master"
        
        save
    
    ## Create a New manage-services Jenkins Job
    7. Click on "New Item" to create a new job -> Enter a name for your job, such as "manage-services" -> Select "Freestyle project" and click "OK."

    ## Configure the manage-services Jenkins Job
    8. In the configuration:
       Choose Build Triggers -> Projects to watch "nautilus-app-deployment" ->Trigger only if build is stable 
       Add a build step: "Execute shell" and enter the script:

       #!/bin/bash 
       sshpass -p "Ir0nM@n" ssh -o StrictHostKeyChecking=no tony@stapp01 "echo 'Ir0nM@n' | sudo -S systemctl restart httpd"
       sshpass -p "Am3ric@" ssh -o StrictHostKeyChecking=no steve@stapp02 "echo 'Am3ric@' | sudo -S systemctl restart httpd"
       sshpass -p "BigGr33n" ssh -o StrictHostKeyChecking=no banner@stapp03 "echo 'BigGr33n' | sudo -S systemctl restart httpd"

        save

    ## Build the nautilus-app-deployment Jenkins Job
    9. Click on "Build Now. Build will be successed  with no issues and downstream jenkins job manage services also build successfully

    ### Testing ###

#### Nautilus Web Application ####

**Test Case 1: Accessing the Website from Public Network **

1. From any public network machine, access the website by entering the IP address of the load balancer (e.g., `http://172.16.238.14/
1. Open a web browser and navigate to http://172.16.238.14/ (Public IP) or http://stlb01.stratos.xfusioncorp.com/ (Public DNS)
1. From any computer on the public network, open a browser and navigate to `http://stlb01.stratos.xfusioncorp.com`
   The website should load without error. If there is an error, troubleshoot as needed.

**Test Case 2: Viewing the Welcome Message **

1. On the homepage of the website, verify that the welcome message displays correctly. It should read “Welcome to KodeKloud!”.


