A python app needed to be Dockerized, and then it needs to be deployed on App Server 1. We have already copied a requirements.txt file (having the app dependencies) under /python_app/src/ directory on App Server 1. Further complete this task as per details mentioned below:



Create a Dockerfile under /python_app directory:

Use any python image as the base image.
Install the dependencies using requirements.txt file.
Expose the port 8083.
Run the server.py script using CMD.

Build an image named nautilus/python-app using this Dockerfile.

Once image is built, create a container named pythonapp_nautilus:

Map port 8083 of the container to the host port 8092.

Once deployed, you can test the app using curl command on App Server 1.


curl http://localhost:8092/

Ans) 
    # Log into the App Server 1
    1. thor@jump_host ~$ ssh tony@stapp01
       The authenticity of host 'stapp01 (172.16.238.10)' can't be established.
       ECDSA key fingerprint is SHA256:71XL+UQ+zSEbWx5vhqCrD7fwagw0d6U8I347nPBLxIo.
       Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
       Warning: Permanently added 'stapp01,172.16.238.10' (ECDSA) to the list of known hosts.
       tony@stapp01's password:

    # Check the /python_app/ and /python_app/src folder
    2. [tony@stapp01 ~]$ cd /python_app/
       [tony@stapp01 python_app]$ ls -larth
       total 12K
       drwxr-xr-x 1 root root 4.0K Feb  7 05:19 ..
       drwxr-xr-x 3 root root 4.0K Feb  7 05:19 .
       drwxr-xr-x 2 root root 4.0K Feb  7 05:19 src
       [tony@stapp01 python_app]$ cd src/
       [tony@stapp01 src]$ ls -larth
       total 16K
       -rw-r--r-- 1 root root  278 Feb  7 05:18 server.py
       -rw-r--r-- 1 root root    5 Feb  7 05:18 requirements.txt
       drwxr-xr-x 3 root root 4.0K Feb  7 05:19 ..
       drwxr-xr-x 2 root root 4.0K Feb  7 05:19 .
    
    # Check the content in requirements.txt and server.py
    3. [tony@stapp01 src]$ cat requirements.txt
       flask
       
       [tony@stapp01 src]$ cat server.py
       from flask import Flask
       
       # the all-important app variable:
       app = Flask(__name__)
       
       @app.route("/")
       def hello():
           return "Welcome to xFusionCorp Industries!"
       
       if __name__ == "__main__":
               app.config['TEMPLATES_AUTO_RELOAD'] = True
               app.run(host='0.0.0.0', debug=True, port=8083)

    # Write the Dockerfile
    4. [tony@stapp01 python_app]$ sudo vi Dockerfile

       We trust you have received the usual lecture from the local System
       Administrator. It usually boils down to these three things:
       
           #1) Respect the privacy of others.
           #2) Think before you type.
           #3) With great power comes great responsibility.
       
       [sudo] password for tony: 
       
       FROM python:alpine3.19
       WORKDIR /app
       COPY src/* /app/
       RUN pip install -r requirements.txt
       EXPOSE 8083
       CMD python server.py

    # Build the Dockerfile
    5. [tony@stapp01 python_app]$ sudo docker build -t nautilus/python-app .
       Sending build context to Docker daemon  4.608kB
       Step 1/6 : FROM python:alpine3.19
       alpine3.19: Pulling from library/python
       4abcf2066143: Pull complete 
       dca80dc46cec: Pull complete 
       3324090550b3: Pull complete 
       f5c92aa967a6: Pull complete 
       34eb5116f7f2: Pull complete 
       Digest: sha256:14cfc61fc2404da8adc7b1cb1fcb299aefafab22ae571f652527184fbb21ce69
       Status: Downloaded newer image for python:alpine3.19
        ---> b32f0c9b815c
       Step 2/6 : WORKDIR /app
        ---> Running in b1c5824327c3
       Removing intermediate container b1c5824327c3
        ---> 11f65c260292
       Step 3/6 : COPY src/* /app/
        ---> fdb4abb9b658
       Step 4/6 : RUN pip install -r requirements.txt
        ---> Running in ec70620c5c56
       Collecting flask (from -r requirements.txt (line 1))
         Obtaining dependency information for flask from https://files.pythonhosted.org/packages/93/a6/aa98bfe0eb9b8b15d36cdfd03c8ca86a03968a87f27ce224fb4f766acb23/flask-3.0.2-py3-none-any.whl.metadata
         Downloading flask-3.0.2-py3-none-any.whl.metadata (3.6 kB)
       Collecting Werkzeug>=3.0.0 (from flask->-r requirements.txt (line 1))
         Obtaining dependency information for Werkzeug>=3.0.0 from https://files.pythonhosted.org/packages/c3/fc/254c3e9b5feb89ff5b9076a23218dafbc99c96ac5941e900b71206e6313b/werkzeug-3.0.1-py3-none-any.whl.metadata
         Downloading werkzeug-3.0.1-py3-none-any.whl.metadata (4.1 kB)
       Collecting Jinja2>=3.1.2 (from flask->-r requirements.txt (line 1))
         Obtaining dependency information for Jinja2>=3.1.2 from https://files.pythonhosted.org/packages/30/6d/6de6be2d02603ab56e72997708809e8a5b0fbfee080735109b40a3564843/Jinja2-3.1.3-py3-none-any.whl.metadata
         Downloading Jinja2-3.1.3-py3-none-any.whl.metadata (3.3 kB)
       Collecting itsdangerous>=2.1.2 (from flask->-r requirements.txt (line 1))
         Downloading itsdangerous-2.1.2-py3-none-any.whl (15 kB)
       Collecting click>=8.1.3 (from flask->-r requirements.txt (line 1))
         Obtaining dependency information for click>=8.1.3 from https://files.pythonhosted.org/packages/00/2e/d53fa4befbf2cfa713304affc7ca780ce4fc1fd8710527771b58311a3229/click-8.1.7-py3-none-any.whl.metadata
         Downloading click-8.1.7-py3-none-any.whl.metadata (3.0 kB)
       Collecting blinker>=1.6.2 (from flask->-r requirements.txt (line 1))
         Obtaining dependency information for blinker>=1.6.2 from https://files.pythonhosted.org/packages/fa/2a/7f3714cbc6356a0efec525ce7a0613d581072ed6eb53eb7b9754f33db807/blinker-1.7.0-py3-none-any.whl.metadata
         Downloading blinker-1.7.0-py3-none-any.whl.metadata (1.9 kB)
       Collecting MarkupSafe>=2.0 (from Jinja2>=3.1.2->flask->-r requirements.txt (line 1))
         Obtaining dependency information for MarkupSafe>=2.0 from https://files.pythonhosted.org/packages/88/07/2dc76aa51b481eb96a4c3198894f38b480490e834479611a4053fbf08623/MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_x86_64.whl.metadata
         Downloading MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_x86_64.whl.metadata (3.0 kB)
       Downloading flask-3.0.2-py3-none-any.whl (101 kB)
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 101.3/101.3 kB 952.0 kB/s eta 0:00:00
       Downloading blinker-1.7.0-py3-none-any.whl (13 kB)
       Downloading click-8.1.7-py3-none-any.whl (97 kB)
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 97.9/97.9 kB 953.6 kB/s eta 0:00:00
       Downloading Jinja2-3.1.3-py3-none-any.whl (133 kB)
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 133.2/133.2 kB 1.1 MB/s eta 0:00:00
       Downloading werkzeug-3.0.1-py3-none-any.whl (226 kB)
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 226.7/226.7 kB 1.1 MB/s eta 0:00:00
       Downloading MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_x86_64.whl (33 kB)
       Installing collected packages: MarkupSafe, itsdangerous, click, blinker, Werkzeug, Jinja2, flask
       Successfully installed Jinja2-3.1.3 MarkupSafe-2.1.5 Werkzeug-3.0.1 blinker-1.7.0 click-8.1.7 flask-3.0.2 itsdangerous-2.1.2
       WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
       
       [notice] A new release of pip is available: 23.2.1 -> 24.0
       [notice] To update, run: pip install --upgrade pip
       Removing intermediate container ec70620c5c56
        ---> d47b41fbb401
       Step 5/6 : EXPOSE 8083
        ---> Running in cb088730b01b
       Removing intermediate container cb088730b01b
        ---> f777caa7468e
       Step 6/6 : CMD python server.py
        ---> Running in 49360da8fe82
       Removing intermediate container 49360da8fe82
        ---> d962d9d7c798
       Successfully built d962d9d7c798
       Successfully tagged nautilus/python-app:latest

    # Check the Docker images
    6. [tony@stapp01 python_app]$ sudo docker images
       REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
       nautilus/python-app   latest              d962d9d7c798        49 seconds ago      66.7MB
       python                alpine3.19          b32f0c9b815c        7 weeks ago         51.6MB

    # Build the Docker container
    7. [tony@stapp01 python_app]$ sudo docker run -d --name pythonapp_nautilus -p 8092:8083 nautilus/python-app:latest
       31ab6fa726a1ef4c3237eef899d6857dd73671ab9f75e1b47947bc5279f77171

    # Access the container using curl command
    8. [tony@stapp01 python_app]$ curl http://localhost:8092
       Welcome to xFusionCorp Industries!
